[1mdiff --git a/srcs/HttpResponse.cpp b/srcs/HttpResponse.cpp[m
[1mindex 230c434..0640ab5 100644[m
[1m--- a/srcs/HttpResponse.cpp[m
[1m+++ b/srcs/HttpResponse.cpp[m
[36m@@ -6,7 +6,7 @@[m
 /*   By: hkubo <hkubo@student.42tokyo.jp>           +#+  +:+       +#+        */[m
 /*                                                +#+#+#+#+#+   +#+           */[m
 /*   Created: 2023/03/26 14:03:34 by hkubo             #+#    #+#             */[m
[31m-/*   Updated: 2023/05/05 17:24:15 by hkubo            ###   ########.fr       */[m
[32m+[m[32m/*   Updated: 2023/05/05 18:24:04 by hkubo            ###   ########.fr       */[m
 /*                                                                            */[m
 /* ************************************************************************** */[m
 [m
[36m@@ -59,6 +59,10 @@[m [mvoid HttpResponse::set_server_config(const ServerConfig server_config) { this->s[m
 [m
 ServerConfig HttpResponse::get_server_config() { return this->server_config; }[m
 [m
[32m+[m[32mvoid HttpResponse::set_request_parser(RequestParser *request_parser) { this->request_parser = request_parser; }[m
[32m+[m
[32m+[m[32mRequestParser* HttpResponse::get_request_parser() { return this->request_parser; }[m
[32m+[m
 bool HttpResponse::check_uri_is_static(const std::string uri) {[m
     if (uri.find("cgi") == std::string::npos) {[m
         return true;[m
[36m@@ -104,7 +108,7 @@[m [mvoid HttpResponse::get_filetype(char *file_name, char *filetype) {[m
         strcpy(filetype, "text/plain");[m
 }[m
 [m
[31m-int HttpResponse::serve_static(char *file_name, int filesize) {[m
[32m+[m[32mint HttpResponse::serve_static_with_get_method(char *file_name, int file_size) {[m
     // Send response body to client[m
     int src_fd = open(file_name, O_RDONLY, 0);[m
     if (src_fd == FAILURE) {[m
[36m@@ -112,14 +116,14 @@[m [mint HttpResponse::serve_static(char *file_name, int filesize) {[m
         std::cout << "[ERROR] serve_static: File open failed." << std::endl;[m
         return FAILURE;[m
     }[m
[31m-    char *srcp = static_cast<char *>(mmap(0, filesize, PROT_READ, MAP_PRIVATE, src_fd, 0));[m
[32m+[m[32m    char *srcp = static_cast<char *>(mmap(0, file_size, PROT_READ, MAP_PRIVATE, src_fd, 0));[m
     close(src_fd);[m
 [m
     char filetype[MAXLINE];[m
     // Send response headers to client[m
     get_filetype(file_name, filetype);[m
     std::stringstream ss;[m
[31m-    ss << "HTTP/1.0, 200 OK\r\nServer: Ultimate Web Server\r\nConnection: close\r\nContent-length: " << filesize << "\r\n"[m
[32m+[m[32m    ss << "HTTP/1.0, 200 OK\r\nServer: Ultimate Web Server\r\nConnection: close\r\nContent-length: " << file_size << "\r\n"[m
        << "Content-type: " << filetype << "\r\n\r\n";[m
     std::string out;[m
     out = ss.str();[m
[36m@@ -132,17 +136,31 @@[m [mint HttpResponse::serve_static(char *file_name, int filesize) {[m
     }[m
     std::cout << "Response headers:" << std::endl;[m
     std::cout << resp_head;[m
[31m-    if (rio_writen(get_conn_fd(), srcp, filesize) == FAILURE) {[m
[32m+[m[32m    if (rio_writen(get_conn_fd(), srcp, file_size) == FAILURE) {[m
         set_http_status(500);[m
         std::cout << "[ERROR] serve_static: rio_writen error!" << std::endl;[m
[31m-        munmap(srcp, filesize);[m
[32m+[m[32m        munmap(srcp, file_size);[m
         return FAILURE;[m
     }[m
[31m-    munmap(srcp, filesize);[m
[32m+[m[32m    munmap(srcp, file_size);[m
 [m
     return SUCCESS;[m
 }[m
 [m
[32m+[m[32mint HttpResponse::serve_static(char *file_name, int file_size) {[m
[32m+[m[32m    if (get_location().get_allow_method().size() > 0 && std::find(get_location().get_allow_method().begin(), get_location().get_allow_method().end(), get_request_parser()->get_request_method()) == get_location().get_allow_method().end()) {[m
[32m+[m[32m        std::cout << "[ERROR] HttpResponse::serve_static: Request method is not allowed" << std::endl;[m
[32m+[m[32m        return FAILURE;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // TODO: Add POST and DELETE[m
[32m+[m[32m    // if (get_request_parser()->get_request_method() == "GET") {[m
[32m+[m[32m    //     return serve_static_with_get_method(file_name, file_size);[m
[32m+[m[32m    // }[m
[32m+[m
[32m+[m[32m    return serve_static_with_get_method(file_name, file_size);[m
[32m+[m[32m}[m
[32m+[m
 int HttpResponse::serve_dynamic(char *file_name, char *cgi_args) {[m
     char buf[MAXLINE], *emptylist[] = {NULL};[m
 [m
[36m@@ -277,6 +295,7 @@[m [mint HttpResponse::check_http_request(RequestParser parser) {[m
         return FAILURE;[m
     }[m
 [m
[32m+[m[32m    set_request_parser(&parser);[m
     set_is_static(check_uri_is_static(parser.get_target_uri()));[m
 [m
     std::string file_name;[m
[1mdiff --git a/srcs/HttpResponse.hpp b/srcs/HttpResponse.hpp[m
[1mindex a1c0871..3320587 100644[m
[1m--- a/srcs/HttpResponse.hpp[m
[1m+++ b/srcs/HttpResponse.hpp[m
[36m@@ -6,13 +6,14 @@[m
 /*   By: hkubo <hkubo@student.42tokyo.jp>           +#+  +:+       +#+        */[m
 /*                                                +#+#+#+#+#+   +#+           */[m
 /*   Created: 2023/03/26 14:03:45 by hkubo             #+#    #+#             */[m
[31m-/*   Updated: 2023/05/05 17:08:14 by hkubo            ###   ########.fr       */[m
[32m+[m[32m/*   Updated: 2023/05/05 18:06:27 by hkubo            ###   ########.fr       */[m
 /*                                                                            */[m
 /* ************************************************************************** */[m
 [m
 #ifndef HTTPRESPONSE_HPP[m
 #define HTTPRESPONSE_HPP[m
 [m
[32m+[m[32m#include <algorithm>[m
 #include "RequestParser.hpp"[m
 #include "ServerConfig.hpp"[m
 #include "ServerLocation.hpp"[m
[36m@@ -44,12 +45,15 @@[m [mclass HttpResponse {[m
     ServerConfig get_server_config();[m
     void set_location(const ServerLocation location);[m
     ServerLocation get_location();[m
[32m+[m[32m    void set_request_parser(RequestParser *request_parser);[m
[32m+[m[32m    RequestParser* get_request_parser();[m
 [m
     int create_static_file_name(std::string uri, std::string &file_name);[m
     int create_dynamic_file_name_and_cgi_args(std::string uri, std::string &file_name, std::string &cgi_args);[m
     bool check_uri_is_static(const std::string uri);[m
     void get_filetype(char *file_name, char *filetype);[m
[31m-    int serve_static(char *file_name, int filesize);[m
[32m+[m[32m    int serve_static_with_get_method(char *file_name, int file_size);[m
[32m+[m[32m    int serve_static(char *file_name, int file_size);[m
     int serve_dynamic(char *file_name, char *cgi_args);[m
     void serve_error_page();[m
     RequestParser read_http_request();[m
[36m@@ -69,6 +73,7 @@[m [mclass HttpResponse {[m
     struct stat file_info;[m
     ServerConfig server_config;[m
     ServerLocation location;[m
[32m+[m[32m    RequestParser *request_parser;[m
 };[m
 [m
 #endif[m
