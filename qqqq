[1mdiff --git a/srcs/ConfigParser.cpp b/srcs/ConfigParser.cpp[m
[1mindex b5673df..696e4e5 100644[m
[1m--- a/srcs/ConfigParser.cpp[m
[1m+++ b/srcs/ConfigParser.cpp[m
[36m@@ -6,7 +6,7 @@[m
 /*   By: hkubo <hkubo@student.42tokyo.jp>           +#+  +:+       +#+        */[m
 /*                                                +#+#+#+#+#+   +#+           */[m
 /*   Created: 2023/04/02 17:19:28 by hkubo             #+#    #+#             */[m
[31m-/*   Updated: 2023/04/09 17:23:17 by hkubo            ###   ########.fr       */[m
[32m+[m[32m/*   Updated: 2023/04/09 17:47:16 by hkubo            ###   ########.fr       */[m
 /*                                                                            */[m
 /* ************************************************************************** */[m
 [m
[36m@@ -37,88 +37,65 @@[m [mvoid ConfigParser::add_server(ServerConfig *server) {[m
     set_servers(new_servers);[m
 }[m
 [m
[31m-int ConfigParser::check_client_max_body_size(std::string value) {[m
[31m-    std::string key = "client_max_body_size";[m
[32m+[m[32mint ConfigParser::extract_config_string(std::string value, std::string key, std::string &result) {[m
     size_t pos = value.find(key);[m
     std::string trimed = trim_value(value.substr(pos + key.length()));[m
     if (trimed.length() <= 0) {[m
[31m-        std::cout << "[ERROR] ConfigParser::check_client_max_body_size: client_max_body_size is invalid" << std::endl;[m
[32m+[m[32m        std::cout << "[ERROR] ConfigParser::extract_config_string: config line is invalid" << std::endl;[m
         return FAILURE;[m
     }[m
 [m
[31m-    std::string client_size;[m
     if (trimed.at(trimed.length() - 1) == ';') {[m
[31m-        client_size = trimed.substr(0, trimed.length() - 1);[m
[32m+[m[32m        result = trimed.substr(0, trimed.length() - 1);[m
     } else {[m
[31m-        client_size = trimed;[m
[32m+[m[32m        result = trimed;[m
     }[m
[31m-    if (!is_number(client_size)) {[m
[31m-        std::cout << "[ERROR] ConfigParser::check_client_max_body_size: client_max_body_size is invalid" << std::endl;[m
[31m-        return FAILURE;[m
[31m-    }[m
[31m-    set_client_max_body_size(string_to_int(client_size));[m
[31m-[m
[31m-    return SUCCESS;[m
[31m-}[m
 [m
[31m-int ConfigParser::parse_outside_line(std::string line) {[m
[31m-    std::string value = trim_value(line);[m
[31m-    size_t pos = 0;[m
[31m-    if (value == "server {") {[m
[31m-        set_state(IN_SERVER);[m
[31m-        ServerConfig *server = new ServerConfig();[m
[31m-        add_server(server);[m
[31m-        return SUCCESS;[m
[31m-    } else if ((pos = value.find("client_max_body_size")) != std::string::npos) {[m
[31m-        return check_client_max_body_size(value);[m
[31m-    } else {[m
[31m-        std::cout << "[ERROR] ConfigParser::parse_outside_line: config line is invalid" << std::endl;[m
[31m-        return FAILURE;[m
[31m-    }[m
     return SUCCESS;[m
 }[m
 [m
[31m-int ConfigParser::check_listen(std::string value) {[m
[31m-    std::string key = "listen";[m
[32m+[m[32mint ConfigParser::extract_config_number(std::string value, std::string key, int &result) {[m
     size_t pos = value.find(key);[m
     std::string trimed = trim_value(value.substr(pos + key.length()));[m
     if (trimed.length() <= 0) {[m
[31m-        std::cout << "[ERROR] ConfigParser::check_listen: listen port is invalid" << std::endl;[m
[32m+[m[32m        std::cout << "[ERROR] ConfigParser::extract_config_number: config line is invalid" << std::endl;[m
         return FAILURE;[m
     }[m
 [m
[31m-    std::string port_num;[m
[32m+[m[32m    std::string num;[m
     if (trimed.at(trimed.length() - 1) == ';') {[m
[31m-        port_num = trimed.substr(0, trimed.length() - 1);[m
[32m+[m[32m        num = trimed.substr(0, trimed.length() - 1);[m
     } else {[m
[31m-        port_num = trimed;[m
[32m+[m[32m        num = trimed;[m
     }[m
[31m-    if (!is_number(port_num)) {[m
[31m-        std::cout << "[ERROR] ConfigParser::check_client_max_body_size: client_max_body_size is invalid" << std::endl;[m
[32m+[m[32m    if (!is_number(num)) {[m
[32m+[m[32m        std::cout << "[ERROR] ConfigParser::extract_config_number: config line is invalid" << std::endl;[m
         return FAILURE;[m
     }[m
[31m-    get_servers()[get_servers().size() - 1]->set_port(string_to_int(port_num));[m
[32m+[m[32m    result = string_to_int(num);[m
 [m
     return SUCCESS;[m
 }[m
 [m
[31m-int ConfigParser::check_server_name(std::string value) {[m
[31m-    std::string key = "server_name";[m
[31m-    size_t pos = value.find(key);[m
[31m-    std::string trimed = trim_value(value.substr(pos + key.length()));[m
[31m-    if (trimed.length() <= 0) {[m
[31m-        std::cout << "[ERROR] ConfigParser::check_server_name: server name is invalid" << std::endl;[m
[31m-        return FAILURE;[m
[31m-    }[m
[31m-[m
[31m-    std::string server_name;[m
[31m-    if (trimed.at(trimed.length() - 1) == ';') {[m
[31m-        server_name = trimed.substr(0, trimed.length() - 1);[m
[32m+[m[32mint ConfigParser::parse_outside_line(std::string line) {[m
[32m+[m[32m    std::string value = trim_value(line);[m
[32m+[m[32m    size_t pos = 0;[m
[32m+[m[32m    if (value == "server {") {[m
[32m+[m[32m        set_state(IN_SERVER);[m
[32m+[m[32m        ServerConfig *server = new ServerConfig();[m
[32m+[m[32m        add_server(server);[m
[32m+[m[32m        return SUCCESS;[m
[32m+[m[32m    } else if ((pos = value.find("client_max_body_size")) != std::string::npos) {[m
[32m+[m[32m        int result;[m
[32m+[m[32m        int res = extract_config_number(value, "client_max_body_size", result);[m
[32m+[m[32m        if (res == SUCCESS) {[m
[32m+[m[32m            set_client_max_body_size(result);[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
     } else {[m
[31m-        server_name = trimed;[m
[32m+[m[32m        std::cout << "[ERROR] ConfigParser::parse_outside_line: config line is invalid" << std::endl;[m
[32m+[m[32m        return FAILURE;[m
     }[m
[31m-    get_servers()[get_servers().size() - 1]->set_host_name(server_name);[m
[31m-[m
     return SUCCESS;[m
 }[m
 [m
[36m@@ -167,9 +144,19 @@[m [mint ConfigParser::parse_server_line(std::string line) {[m
         set_state(OUTSIDE);[m
         return SUCCESS;[m
     } else if ((pos = value.find("listen")) != std::string::npos) {[m
[31m-        return check_listen(value);[m
[32m+[m[32m        int result;[m
[32m+[m[32m        int res = extract_config_number(value, "listen", result);[m
[32m+[m[32m        if (res == SUCCESS) {[m
[32m+[m[32m            get_servers()[get_servers().size() - 1]->set_port(result);[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
     } else if ((pos = value.find("server_name")) != std::string::npos) {[m
[31m-        return check_server_name(value);[m
[32m+[m[32m        std::string result;[m
[32m+[m[32m        int res = extract_config_string(value, "server_name", result);[m
[32m+[m[32m        if (res == SUCCESS) {[m
[32m+[m[32m            get_servers()[get_servers().size() - 1]->set_host_name(result);[m
[32m+[m[32m        }[m
[32m+[m[32m        return res;[m
     } else if ((pos = value.find("location")) != std::string::npos) {[m
         return check_location(value);[m
     } else {[m
[36m@@ -181,7 +168,13 @@[m [mint ConfigParser::parse_server_line(std::string line) {[m
 }[m
 [m
 int ConfigParser::parse_location_line(std::string line) {[m
[31m-    (void)line;[m
[32m+[m[32m    // std::string value = trim_value(line);[m
[32m+[m[32m    // size_t pos = 0;[m
[32m+[m[32m    // if (value == "}") {[m
[32m+[m[32m    //     set_state(IN_SERVER);[m
[32m+[m[32m    //     return SUCCESS;[m
[32m+[m[32m    // } else if[m[41m [m
[32m+[m[32m    (void) line;[m
     return SUCCESS;[m
 }[m
 [m
[36m@@ -225,6 +218,7 @@[m [mint ConfigParser::parse_config(const std::string file_name) {[m
         }[m
     }[m
 [m
[32m+[m[32m    std::cout << "client size: " << get_client_max_body_size() << std::endl;[m
     std::cout << "server size: " << get_servers().size() << std::endl;[m
     std::cout << "server port: " << get_servers()[0]->get_port() << std::endl;[m
     std::cout << "server host: " << get_servers()[0]->get_host_name() << std::endl;[m
[1mdiff --git a/srcs/ConfigParser.hpp b/srcs/ConfigParser.hpp[m
[1mindex cba3e46..c91138a 100644[m
[1m--- a/srcs/ConfigParser.hpp[m
[1m+++ b/srcs/ConfigParser.hpp[m
[36m@@ -6,7 +6,7 @@[m
 /*   By: hkubo <hkubo@student.42tokyo.jp>           +#+  +:+       +#+        */[m
 /*                                                +#+#+#+#+#+   +#+           */[m
 /*   Created: 2023/04/02 17:19:52 by hkubo             #+#    #+#             */[m
[31m-/*   Updated: 2023/04/09 17:10:42 by hkubo            ###   ########.fr       */[m
[32m+[m[32m/*   Updated: 2023/04/09 17:47:19 by hkubo            ###   ########.fr       */[m
 /*                                                                            */[m
 /* ************************************************************************** */[m
 [m
[36m@@ -42,10 +42,9 @@[m [mclass ConfigParser {[m
     std::vector<ServerConfig *> get_servers();[m
     void set_client_max_body_size(int client_max_body_size);[m
     void add_server(ServerConfig *server);[m
[32m+[m[32m    int extract_config_string(std::string value, std::string key, std::string &result);[m
[32m+[m[32m    int extract_config_number(std::string value, std::string key, int &result);[m
     int get_client_max_body_size();[m
[31m-    int check_client_max_body_size(std::string value);[m
[31m-    int check_listen(std::string value);[m
[31m-    int check_server_name(std::string value);[m
     int check_location(std::string value);[m
     int parse_outside_line(std::string line);[m
     int parse_server_line(std::string line);[m
